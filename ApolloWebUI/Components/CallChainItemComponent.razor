@using Model;
@using Blazored
@using Blazored.Modal
@using Blazored.Modal.Services
@using Microsoft.AspNetCore.Http
@using System.Text.Json

@inject IModalService ModalService
<g transform="translate(@x, @y)" style="opacity: 1;" @onclick="HandleClick">
    <rect height="42" ry="2" rx="2" y="-22" x="20" width="100%" fill="@Background()"></rect>
    <text x="13" y="5" fill="#E54C17"></text>
    <text class="node-text" x="35" y="-6" fill="#333" style="font-size: 11px;">@Request.Location</text>
    <text class="node-text" x="35" y="12" fill="#ccc" style="font-size: 11px;">@Request.Method</text>
    <circle r="3" stroke-width="2.5" style="cursor: pointer; stroke: rgb(110, 64, 170);"></circle>
</g>

@code
{
    int x, y;
    [Parameter]
    public int ListIndex { get; set; }
    [Parameter]
    public CallChainRequest Request { get; set; }
    [Parameter]
    public CallChainResponse Response { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var spans = (Request != null ? Request.SpanId : Response.SpanId).Split('.');
        x = 12 * spans.Length;
        y = 24 + 48 * (ListIndex + 1);
    }

    private void HandleClick()
    {
        var parameters = new ModalParameters();
        parameters.Add("request", Request);
        parameters.Add("response", Response);
        ModalService.Show("调用链详情", typeof(CallChainItemModal), parameters);
    }

    private string Background()
    {
        if (Response?.Response != null)
        {
            try
            {
                JsonElement jsonElement = JsonSerializer.Deserialize<JsonElement>
            (Response?.Response.ToString());
                if (jsonElement.TryGetProperty("code", out var code))
                {
                    if (code.GetInt32() != 0)
                    {
                        return "rgba(255,0,0,0.5)";
                    }
                }
                else if ((jsonElement.TryGetProperty("success", out var success) && success.GetString() == "true") == false)
                {
                    return "rgba(255,0,0,0.5)";
                }
            }
            catch (Exception ex)
            {
                ;
            }
        }
        return "rgba(0,0,0,0)";
    }
}