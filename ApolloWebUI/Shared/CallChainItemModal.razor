@using Blazored
@using Blazored.Modal
@using Blazored.Modal.Services
@using Model
@using ApolloWebUI.Data
@using Microsoft.AspNetCore.Http
@using System.Text.Json

@inject IModalService ModalService

<div>
    <ul class="list-group bg-light">
        <li class="list-group-item">
            <label>请求串</label>
            <textarea class="form-control" style="width:100%" disabled>@Request?.Request</textarea>
        </li>
        <li class="list-group-item">
            <label>请求时间</label>
            <textarea class="form-control" style="width:100%" disabled>@Request?.RequestTime.ToString("yyyy-MM-dd hh:mm:ss fff")</textarea>
        </li>
        <li class="list-group-item">
            <label>返回串</label>
            <textarea class="form-control" style="width:100%" disabled>@Response?.Response</textarea>
        </li>
        <li class="list-group-item">
            <label>返回时间</label>
            <textarea class="form-control" style="width:100%" disabled>@Response?.ResponseTime.ToString("yyyy-MM-dd hh:mm:ss fff")</textarea>
        </li>
        <li class="list-group-item">
            <label>产品Id</label>
            <textarea class="form-control" style="width:100%" disabled>@GetProductId()</textarea>
        </li>
        <li class="list-group-item">
            <label>错误码</label>
            <textarea class="form-control" style="width:100%" disabled>@GetCode()</textarea>
        </li>
        <li class="list-group-item">
            <label>信息</label>
            <textarea class="form-control" style="width:100%" disabled>@GetMessage()</textarea>
        </li>
    </ul>
    <button class="btn btn-primary" @onclick="@Done">确定</button>
</div>

@code {

    [CascadingParameter] ModalParameters Parameters { get; set; }

    bool ShowForm { get; set; } = true;
    int Step { get; set; } = 0;
    string NewValue { get; set; }
    CallChainRequest Request { get; set; }
    CallChainResponse Response { get; set; }
    protected override void OnInitialized()
    {
        Request = Parameters.Get<CallChainRequest>("request");
        Response = Parameters.Get<CallChainResponse>("response");
    }

    void Done()
    {
        ModalService.Close(ModalResult.Ok(""));
    }

    string GetProductId()
    {
        object obj;
        if (Request?.Request != null)
        {
            obj = Request?.Request;
        }
        else
        {
            obj = Response?.Response;
        }

        if (obj == null)
        {
            return string.Empty;
        }

        var jEle = JsonSerializer.Deserialize<JsonElement>(obj.ToString());
        if (jEle.TryGetProperty("proID", out var proId))
        {
            return proId.GetString();
        }
        else
        {
            return string.Empty;
        }
    }

    string GetCode()
    {
        object obj;
        if (Response?.Response != null)
        {
            obj = Response?.Response;
        }
        else
        {
            obj = Request?.Request;
        }

        if (obj == null)
        {
            return string.Empty;
        }

        var jEle = JsonSerializer.Deserialize<JsonElement>(obj.ToString());
        if (jEle.TryGetProperty("code", out var proId))
        {
            return proId.GetInt32().ToString();
        }
        else
        {
            return string.Empty;
        }
    }


    string GetMessage()
    {
        object obj;
        if (Response?.Response != null)
        {
            obj = Response?.Response;
        }
        else
        {
            obj = Request?.Request;
        }

        if (obj == null)
        {
            return string.Empty;
        }

        var jEle = JsonSerializer.Deserialize<JsonElement>(obj.ToString());
        if (jEle.TryGetProperty("message", out var proId))
        {
            return proId.GetString();
        }
        else
        {
            return string.Empty;
        }
    }
}
