@page "/namespaceDisplay/{spaceName}"
@attribute [Authorize]
@using Model;
@using Microsoft.Extensions.Configuration;
@using Blazored.Modal.Services
@using ApolloWebUI.Data
@using Microsoft.AspNetCore.Http

@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration Configuration;
@inject IModalService  Modal;
@inject ApolloService Apollo
<h3>@SpaceName</h3>

@if (Content == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <label class="text-primary">运行环境：</label>
        <select @onchange="EnvironmentChanged">
            @foreach (var item in Enum.GetValues(typeof(ApolloEnvironmentEnum)))
            {
                <option value="@item">@item.ToString()</option>
            }
        </select>
    </div>
    <NamespaceComponent @bind-Content="@Content" />
}
@Message

@code {
    [Parameter]
    public string SpaceName { get; set; }

    public NamespaceModel Content { get; set; }

    private static HttpClient _httpClient = new HttpClient();

    private string Message { get; set; }

    private ApolloEnvironmentEnum ApolloEnvironment
    {
        get
        {
            return Apollo.Environment;
        }
        set
        {
            if (Apollo.Environment != value)
            {
                Apollo.Environment = value;
                OnInitializedAsync();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Content = await Apollo.GetNamespanceAsync(SpaceName);
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }

    private async Task EnvironmentChanged(ChangeEventArgs changeEventArgs)
    {
        Apollo.Environment = (ApolloEnvironmentEnum)Enum.Parse(typeof(ApolloEnvironmentEnum), changeEventArgs.Value.ToString());
        await OnInitializedAsync();
    }
}
