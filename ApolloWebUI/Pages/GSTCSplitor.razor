@page "/GSTCSplitor"
@attribute [Authorize]
@using Blazored.Modal.Services
@using System.Text.Json
@using ApolloWebUI.Model
@using System.Text;
@using Microsoft.Extensions.Configuration;
@using System.Buffers;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Http
@inject IModalService  Modal
@inject IConfiguration Configuration

<div>
    <textarea class="form-control" style="width:100%" @bind="@RequestUri"></textarea>
</div>
<ul>
    <li>uriTemple=@uriTemple</li>
    @foreach (var p in paramters)
    {
        <li>ej_@(p.Item1)=@(p.Item2)</li>
    }
</ul>
<button @onclick="Split">查询</button>
<div>
    <p style="color:red">@Message</p>
</div>
@code {
    string _requestUri;
    string RequestUri
    {
        get
        {
            return _requestUri;
        }
        set
        {
            _requestUri = value;
        }
    }
    string Message { get; set; } = string.Empty;

    List<(string, string)> paramters = new List<(string, string)>();

    string uriTemple = null;

    async Task Split()
    {
        try
        {
            uriTemple = Configuration["uriTemple"];
            if (string.IsNullOrWhiteSpace(RequestUri))
            {
                Message = "链接不能为空";
            }
            else
            {
                paramters.Clear();
                Message = string.Empty;
            }
            var uri = new Uri(RequestUri);
            var qs = uri.Query.Substring(1).Split('&');
            string userName = null;
            var userNamesSection = Configuration.GetSection("userNames");
            var userNamesArray = userNamesSection.AsEnumerable();
            List<string> userNames = new List<string>();
            foreach (var item in userNamesArray)
            {
                userNames.Add(item.Value);
            }
            foreach (var item in qs)
            {
                var temp = item.Split('=', 2);
                if (temp[0] == "salesMenNO")
                {
                    userName = temp[1];
                    continue;
                }
                else if (userNames.Contains(temp[0]))
                {
                    continue;
                }
                paramters.Add((temp[0], temp[1]));
            }

            StringBuilder sb = new StringBuilder(uriTemple);
            foreach (var item in paramters)
            {
                sb.Replace($"{{{item.Item1}}}", item.Item2);
            }
            sb.Replace($"{{userName}}", userName);
            var newUri = sb.ToString();
            if (newUri != RequestUri)
            {
                Message = $"警告！生成的Uri与原Uri不一致！对比Uri的参数数量和名称是否变化（{newUri}）";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Message = $"处理结果时出现异常：{ex.Message}";
        }
    }
}
